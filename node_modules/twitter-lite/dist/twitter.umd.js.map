{"version":3,"file":"twitter.umd.js","sources":["../twitter.js"],"sourcesContent":["const crypto = require('crypto');\nconst OAuth = require('oauth-1.0a');\nconst Fetch = require('cross-fetch');\nconst querystring = require('querystring');\nconst Stream = require('./stream');\n\nconst getUrl = (subdomain, endpoint = '1.1') =>\n  `https://${subdomain}.twitter.com/${endpoint}`;\n\nconst createOauthClient = ({ key, secret }) => {\n  const client = OAuth({\n    consumer: { key, secret },\n    signature_method: 'HMAC-SHA1',\n    hash_function(baseString, key) {\n      return crypto\n        .createHmac('sha1', key)\n        .update(baseString)\n        .digest('base64');\n    },\n  });\n\n  return client;\n};\n\nconst defaults = {\n  subdomain: 'api',\n  consumer_key: null,\n  consumer_secret: null,\n  access_token_key: null,\n  access_token_secret: null,\n  bearer_token: null,\n  version: '1.1',\n};\n\n// Twitter expects POST body parameters to be URL-encoded: https://developer.twitter.com/en/docs/basics/authentication/guides/creating-a-signature\n// However, some endpoints expect a JSON payload - https://developer.twitter.com/en/docs/direct-messages/sending-and-receiving/api-reference/new-event\n// It appears that JSON payloads don't need to be included in the signature,\n// because sending DMs works without signing the POST body\nconst JSON_ENDPOINTS = [\n  'direct_messages/events/new',\n  'direct_messages/welcome_messages/new',\n  'direct_messages/welcome_messages/rules/new',\n  'media/metadata/create',\n  'collections/entries/curate',\n];\n\nconst baseHeaders = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n\nfunction percentEncode(string) {\n  // From OAuth.prototype.percentEncode\n  return string\n    .replace(/!/g, '%21')\n    .replace(/\\*/g, '%2A')\n    .replace(/'/g, '%27')\n    .replace(/\\(/g, '%28')\n    .replace(/\\)/g, '%29');\n}\n\nclass Twitter {\n  constructor(options) {\n    const config = Object.assign({}, defaults, options);\n    this.authType = config.bearer_token ? 'App' : 'User';\n    this.client = createOauthClient({\n      key: config.consumer_key,\n      secret: config.consumer_secret,\n    });\n\n    this.token = {\n      key: config.access_token_key,\n      secret: config.access_token_secret,\n    };\n\n    this.url = getUrl(config.subdomain, config.version);\n    this.oauth = getUrl(config.subdomain, 'oauth');\n    this.config = config;\n  }\n\n  /**\n   * Parse the JSON from a Response object and add the Headers under `_headers`\n   * @param {Response} response - the Response object returned by Fetch\n   * @return {Promise<object>}\n   * @private\n   */\n  static async _handleResponse(response) {\n    const headers = response.headers; // TODO: see #44\n    if (response.ok) {\n      // Return empty response on 204 \"No content\", or Content-Length=0\n      if (response.status === 204 || response.headers.get('content-length') === '0')\n        return {\n          _headers: headers,\n        };\n      // Otherwise, parse JSON response\n      return response.json().then(res => {\n        res._headers = headers; // TODO: this creates an array-like object when it adds _headers to an array response\n        return res;\n      });\n    } else {\n      throw {\n        _headers: headers,\n        ...await response.json(),\n      };\n    }\n  }\n\n  /**\n   * Resolve the TEXT parsed from the successful response or reject the JSON from the error\n   * @param {Response} response - the Response object returned by Fetch\n   * @return {Promise<object>}\n   * @throws {Promise<object>}\n   * @private\n   */\n  static async _handleResponseTextOrJson(response) {\n    let body = await response.text();\n    if (response.ok) {\n      return querystring.parse(body);\n    } else {\n      let error;\n      try {\n        // convert to object if it is a json\n        error = JSON.parse(body);\n      } catch (e) {\n        // it is not a json\n        error = body;\n      }\n      return Promise.reject(error);\n    }\n  }\n\n  async getBearerToken() {\n    const headers = {\n      Authorization:\n        'Basic ' +\n        Buffer.from(\n          this.config.consumer_key + ':' + this.config.consumer_secret,\n        ).toString('base64'),\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n    };\n\n    const results = await Fetch('https://api.twitter.com/oauth2/token', {\n      method: 'POST',\n      body: 'grant_type=client_credentials',\n      headers,\n    }).then(Twitter._handleResponse);\n\n    return results;\n  }\n\n  async getRequestToken(twitterCallbackUrl) {\n    const requestData = {\n      url: `${this.oauth}/request_token`,\n      method: 'POST',\n    };\n\n    let parameters = {};\n    if (twitterCallbackUrl) parameters = { oauth_callback: twitterCallbackUrl };\n    if (parameters) requestData.url += '?' + querystring.stringify(parameters);\n\n    const headers = this.client.toHeader(\n      this.client.authorize(requestData, {}),\n    );\n\n    const results = await Fetch(requestData.url, {\n      method: 'POST',\n      headers: Object.assign({}, baseHeaders, headers),\n    })\n      .then(Twitter._handleResponseTextOrJson);\n\n    return results;\n  }\n\n  async getAccessToken(options) {\n    const requestData = {\n      url: `${this.oauth}/access_token`,\n      method: 'POST',\n    };\n\n    let parameters = { oauth_verifier: options.oauth_verifier, oauth_token: options.oauth_token };\n    if (parameters.oauth_verifier && parameters.oauth_token) requestData.url += '?' + querystring.stringify(parameters);\n\n    const headers = this.client.toHeader( this.client.authorize(requestData) );\n\n    const results = await Fetch(requestData.url, {\n      method: 'POST',\n      headers: Object.assign({}, baseHeaders, headers),\n    })\n      .then(Twitter._handleResponseTextOrJson);\n\n    return results;\n  }\n\n  /**\n   * Construct the data and headers for an authenticated HTTP request to the Twitter API\n   * @param {string} method - 'GET' or 'POST'\n   * @param {string} resource - the API endpoint\n   * @param {object} parameters\n   * @return {{requestData: {url: string, method: string}, headers: ({Authorization: string}|OAuth.Header)}}\n   * @private\n   */\n  _makeRequest(method, resource, parameters) {\n    const requestData = {\n      url: `${this.url}/${resource}.json`,\n      method,\n    };\n    if (parameters)\n      if (method === 'POST') requestData.data = parameters;\n      else requestData.url += '?' + querystring.stringify(parameters);\n\n    let headers = {};\n    if (this.authType === 'User') {\n      headers = this.client.toHeader(\n        this.client.authorize(requestData, this.token),\n      );\n    } else {\n      headers = {\n        Authorization: `Bearer ${this.config.bearer_token}`,\n      };\n    }\n    return {\n      requestData,\n      headers,\n    };\n  }\n\n  /**\n   * Send a GET request\n   * @param {string} resource - endpoint, e.g. `followers/ids`\n   * @param {object} [parameters] - optional parameters\n   * @returns {Promise<object>} Promise resolving to the response from the Twitter API.\n   *   The `_header` property will be set to the Response headers (useful for checking rate limits)\n   */\n  get(resource, parameters) {\n    const { requestData, headers } = this._makeRequest(\n      'GET',\n      resource,\n      parameters,\n    );\n\n    return Fetch(requestData.url, { headers })\n      .then(Twitter._handleResponse);\n  }\n\n  /**\n   * Send a POST request\n   * @param {string} resource - endpoint, e.g. `users/lookup`\n   * @param {object} body - POST parameters object.\n   *   Will be encoded appropriately (JSON or urlencoded) based on the resource\n   * @returns {Promise<object>} Promise resolving to the response from the Twitter API.\n   *   The `_header` property will be set to the Response headers (useful for checking rate limits)\n   */\n  post(resource, body) {\n    const { requestData, headers } = this._makeRequest(\n      'POST',\n      resource,\n      JSON_ENDPOINTS.includes(resource) ? null : body, // don't sign JSON bodies; only parameters\n    );\n\n    const postHeaders = Object.assign({}, baseHeaders, headers);\n    if (JSON_ENDPOINTS.includes(resource)) {\n      body = JSON.stringify(body);\n    } else {\n      body = percentEncode(querystring.stringify(body));\n      postHeaders['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return Fetch(requestData.url, {\n      method: 'POST',\n      headers: postHeaders,\n      body,\n    })\n      .then(Twitter._handleResponse);\n  }\n\n  /**\n   * Send a PUT request \n   * @param {string} resource - endpoint e.g. `direct_messages/welcome_messages/update`\n   * @param {object} parameters - required or optional query parameters\n   * @param {object} body - PUT request body \n   * @returns {Promise<object>} Promise resolving to the response from the Twitter API.\n   */\n  put(resource, parameters, body) {\n    const { requestData, headers } = this._makeRequest(\n      'PUT',\n      resource,\n      parameters,\n    );\n\n    const putHeaders = Object.assign({}, baseHeaders, headers);\n    body = JSON.stringify(body);\n\n    return Fetch(requestData.url, {\n      method: 'PUT',\n      headers: putHeaders,\n      body,\n    })\n      .then(Twitter._handleResponse);\n  }\n\n  /**\n   *\n   * @param {string} resource - endpoint, e.g. `statuses/filter`\n   * @param {object} parameters\n   * @returns {Stream}\n   */\n  stream(resource, parameters) {\n    if (this.authType !== 'User')\n      throw new Error('Streams require user context authentication');\n\n    const stream = new Stream();\n\n    // POST the request, in order to accommodate long parameter lists, e.g.\n    // up to 5000 ids for statuses/filter - https://developer.twitter.com/en/docs/tweets/filter-realtime/api-reference/post-statuses-filter\n    const requestData = {\n      url: `${getUrl('stream')}/${resource}.json`,\n      method: 'POST',\n    };\n    if (parameters) requestData.data = parameters;\n\n    const headers = this.client.toHeader(\n      this.client.authorize(requestData, this.token),\n    );\n\n    const request = Fetch(requestData.url, {\n      method: 'POST',\n      headers: {\n        ...headers,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: percentEncode(querystring.stringify(parameters)),\n    });\n\n    request\n      .then(response => {\n        stream.destroy = this.stream.destroy = () => response.body.destroy();\n\n        if (response.ok) {\n          stream.emit('start', response);\n        } else {\n          response._headers = response.headers;  // TODO: see #44 - could omit the line\n          stream.emit('error', response);\n        }\n\n        response.body\n          .on('data', chunk => stream.parse(chunk))\n          .on('error', error => stream.emit('error', error))  // no point in adding the original response headers\n          .on('end', () => stream.emit('end', response));\n      })\n      .catch(error => stream.emit('error', error));\n\n    return stream;\n  }\n}\n\nmodule.exports = Twitter;\n"],"names":["const","crypto","require","OAuth","Fetch","querystring","Stream","getUrl","subdomain","endpoint","defaults","consumer_key","consumer_secret","access_token_key","access_token_secret","bearer_token","version","JSON_ENDPOINTS","baseHeaders","Accept","percentEncode","string","replace","Twitter","constructor","options","config","Object","assign","authType","client","consumer","key","secret","signature_method","hash_function","baseString","createHmac","update","digest","token","url","oauth","_handleResponse","response","headers","ok","status","get","_headers","json","then","res","_handleResponseTextOrJson","text","body","parse","error","JSON","e","Promise","reject","getBearerToken","Authorization","Buffer","from","this","toString","method","getRequestToken","twitterCallbackUrl","requestData","parameters","oauth_callback","stringify","toHeader","authorize","getAccessToken","oauth_verifier","oauth_token","_makeRequest","resource","data","post","includes","postHeaders","put","putHeaders","stream","Error","destroy","emit","on","chunk","catch","module","exports"],"mappings":"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"}